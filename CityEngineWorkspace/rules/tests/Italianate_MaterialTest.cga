/**
 * File:    Italianate_BETA.cga
 * Created: 10:41 AM 6/29/2020
 * Author:  Kevin Huberty
 */

version "2020.0"

@Hidden
attr massType = ""
@Hidden
attr floorIndex = 0
@Hidden
attr floorCount = 0
@Hidden
attr eachHeight = 0
@Hidden
attr tileWidth = 3.1
@Hidden
attr windowWidth = 1.4
@Hidden
attr doorWidth = 2.1
@Hidden
attr foundationHeight = 0
@Hidden
attr groundfloorHeight = 3
@Hidden
attr floorHeight = 2.8
@Hidden
attr topfloorHeight = 2.8
@Hidden
attr type= ""


attr AddBalcony = false

const italianatewindowAsset = "facades/palazzo/elem_window_frame.obj"
const italianateroundwindowtopAsset = "facades/palazzo/elem_window_roundtop.obj"
const italianatetrianglewindowtopAsset = "facades/palazzo/elem_window_triangletop.obj"
const italianatehalfarchAsset = "facades/palazzo/elem_facade_halfarch.obj"
const italianateledgeAsset = "facades/palazzo/elem_facade_ledge.obj"
const italianatemodillionAsset = "facades/palazzo/elem_facade_modillion.obj"


const wallInset = 0.4

const wallColor = "#ffffff"

BuildingSplit(__type, __foundationHeight, __groundfloorHeight, __floorHeight, __topfloorHeight, __tileWidth, __windowWidth, __doorWidth) -->
	alignScopeToAxes(y)

	set(foundationHeight, __foundationHeight)
	set(groundfloorHeight, __groundfloorHeight)
	set(floorHeight, __floorHeight)
	set(topfloorHeight, __topfloorHeight)
	set(tileWidth, __tileWidth)
	set(windowWidth, __windowWidth)
	set(doorWidth, __doorWidth)
	set(type, __type)
	
	
	split(y){foundationHeight    : 
                set(massType, "Foundation")
                set(eachHeight, __foundationHeight)
                [case type == "Shell": FloorShell else: FloorMass]
                NIL
            |groundfloorHeight   : 
                set(massType, "Ground")
                set(eachHeight, groundfloorHeight)
                [case type == "Shell": FloorShell else: FloorMass]
                NIL
            |{~floorHeight       : 
                set(massType, "Middle")
                set(eachHeight, floorHeight)
                [case type == "Shell": FloorShell else: FloorMass]
                NIL}*
            |topfloorHeight      : 
                set(massType, "Top")
                set(eachHeight, topfloorHeight)
                [case type == "Shell": FloorShell else: FloorMass]
                NIL
            |1                 : TopLedge}

FloorShell -->
    set(floorIndex, split.index)
    set(floorCount, split.total)
    comp(f) {bottom: NIL | top: NIL | all: Facade}

FloorMass -->
    set(floorIndex, split.index)
    set(floorCount, split.total)
    comp(f) {top: Ceiling | bottom: Base | all: NIL}

Base -->
	offset(-.01, inside)
	extrude(-0.15)

Ceiling -->
	offset(-.01, inside)
	extrude(-.25)

Facade -->
	alignScopeToAxes(y)
	
	[case floorIndex == 0: 
		SubFloorItalianate(floorIndex)
	case floorIndex == 2:
		split(y){~1	: SubFloorItalianate(floorIndex) [case AddBalcony: BalconyItalianate else: NIL]
				|0.5: TopLedgePalazzo}
	else:
		split(y){1 : BottomLedgeItalianate(floorIndex) | ~1 : SubFloorItalianate(floorIndex) | 0.5 : TopLedgeItalianate}]
	
SubFloorItalianate(floorIndex) -->
    split(x){0.5         : WallItalianate(1)
            |{~tileWidth : TileItalianate(floorIndex) }* 
			| 0.5        : WallItalianate(1) }
			
TileItalianate(floorIndex) -->
	case floorIndex == 0:
		split(x){ ~1         : SolidWallItalianate
			    | doorWidth  : DoorTileItalianate
			    | ~1         : SolidWallItalianate }		 
	else: 	
		split(x){ ~1           : WallItalianate(getWalltypeItalianate(floorIndex))
			    | windowWidth  : WindowTileItalianate(floorIndex)
			    | ~1           : WallItalianate(getWalltypeItalianate(floorIndex)) }
			    
WindowTileItalianate(floorIndex) -->
	[case floorIndex == 1 || floorIndex == 999 : WindowItalianate
	case floorIndex == 2 : WindowItalianate t(0,'1,0) WindowOrnamentRound
	else : WindowItalianate WindowLedgeItalianate t(0,'1,0) WindowOrnamentTriangle]
	
WindowOrnamentTriangle --> 
	s('1.7, 1.2, 0.3) center(x) i(italianatetrianglewindowtopAsset) WallItalianate(0)

WindowOrnamentRound -->
	s('1.7, 1.2, 0.4) center(x) i(italianateroundwindowtopAsset) WallPallazo(0)
	split(x){~1            : WindowModillion 
            | windowWidth : NIL 
            | ~1           : WindowModillion}

	
WindowModillion -->
	s(0.2,'1.3,'0.6) t(0,'-1,0) center(x) i(italianatemodillionAsset) WallPallazo(0)

WindowLedgeItalianate -->
	s('1.5, 0.2, 0.1) t(0,-0.2,0) center(x) primitiveCube() WallPallazo(0)
	
WindowItalianate -->
	s('1,'1,0.2) t(0,0,-0.2)
	t(0,0,0.165)
	[ i(italianatewindowAsset) WallPallazo(0) ]
	Glass

DoorTileItalianate -->
	split(y){~1          : Door 
            | scope.sx/2 : Arcs 
            | 0.5        : Arctop}

Arctop -->
	WallPallazo(1)
	s(0.5,'1,0.3) center(x) i(italianatemodillionAsset) WallPallazo(1)

# 
Arcs -->  
	s('1,'1,wallInset) t(0,0,-wallInset)
	Doortop 
	primitiveCube()
	split(x){ ~1 : ArcAsset 
			| ~1 : r(scopeCenter,0,0,-90) ArcAsset}

Doortop -->
	WallPallazo(0)

ArcAsset --> i(italianatehalfarchAsset) WallPallazo(1)

Door -->
	t(0,0,-wallInset) WallPallazo(0)
	

TopLedge --> WallStripe 

BottomLedgeItalianate(floorIndex) -->

	case floorIndex == 1 : split(y){~1 : WallPallazo(0) 
                                   |~1 : s('1,'1,0.2) LedgeAsset}
	case floorIndex == 999 : split(y){~1 : WallStripe 
                                     | ~1 : s('1,'1,0.2) LedgeAsset}
	else : WallStripe

WallStripe --> 
    split(x){ 0.5 : WallPallazo(1) 
            | ~1  : WallPallazo(2) 
            | 0.5 : WallPallazo(1) } 

LedgeAsset --> i(italianateledgeAsset) WallPallazo(0)

BalconyItalianate --> 
	s('1,2,1) t(0,-0.3,0) primitiveCube() 
	split(y){0.2 : BalconyBeams 
			|0.3 : BalconyFloor 
			|1   : RailingBox }

BalconyBeams -->			
	split(x){ ~0.4 : s(0.2,'1,'0.9) center(x)  WallPallazo(0) }*

RailingBox -->
	comp(f){front : Rail 
           | left : Rail 
           | right : Rail}

Rail --> 
	 s('1.1,'1,0.1) t(0,0,-0.1) center(x) primitiveCube() WallPallazo(0)

BalconyFloor --> WallPallazo(0)

getWalltypeItalianate(floorIndex) = 
	case floorIndex == 0 : 1
	case floorIndex == 1 : 1
	else : 2

WallPallazo(walltype) -->
	case walltype == 1 :
		color(wallColor)
	case walltype == 2 :
		color(wallColor)
	else :
		color(wallColor)

SolidWallItalianate -->
		s('1,'1,wallInset) t(0,0,-wallInset)
		primitiveCube()
		WallPallazo(1)	    
			    