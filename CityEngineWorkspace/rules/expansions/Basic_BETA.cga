/**
 * File:    Basic_BETA.cga
 * Created: 1 Jul 2020 03:50:44 GMT
 * Author:  Kevin Huberty
 */

version "2020.0"

@Hidden
attr type= ""
@Hidden
attr floorIndex = 0
@Hidden
attr floorCount = 0
@Hidden
attr eachHeight = 0
@Hidden
attr floorType = ""

# --Inherited------------------------------

@Hidden
attr tileWidth = 3.1
@Hidden
attr windowWidth = 1.4
@Hidden
attr doorWidth = 2.1
@Hidden
attr foundationHeight = 0
@Hidden
attr groundfloorHeight = 3
@Hidden
attr floorHeight = 2.8
@Hidden
attr topfloorHeight = 2.8

const basicWindow = "facades/basic/window.obj"

const wallColor = "#ffffff"




SplitHandling(__type, __foundationHeight, __groundfloorHeight, __floorHeight, __topfloorHeight, __tileWidth, __windowWidth, __doorWidth) -->
	alignScopeToAxes(y)
	
	set(type, __type)

	set(foundationHeight, __foundationHeight)
	set(groundfloorHeight, __groundfloorHeight)
	set(floorHeight, __floorHeight)
	set(topfloorHeight, __topfloorHeight)
	
	set(tileWidth, __tileWidth)
	set(windowWidth, __windowWidth)
	set(doorWidth, __doorWidth)
	
	[case type == "Floors": FacadeSplit else: comp(f) {side: FacadeSplit}]
	
	
FacadeSplit -->
	split(y){foundationHeight    : 
                set(floorType, "Foundation")
                set(eachHeight, foundationHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL
            |groundfloorHeight   : 
                set(floorType, "Ground")
                set(eachHeight, groundfloorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL
            |{~floorHeight       : 
                set(floorType, "Middle")
                set(eachHeight, floorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL}*
            |topfloorHeight      : 
                set(floorType, "Top")
                set(eachHeight, topfloorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL
			}
         
FloorMass -->
    set(floorIndex, split.index)
    set(floorCount, split.total)

	comp(f) {top: Interiors.Start("Ceiling") | bottom: Interiors.Start("Floor") | all: NIL}

         
Facade -->   	
	[case type=="Ground": GroundFloor
	 else: Floor]
	 
Floor -->
	split(x){ 1 : Wall 
			| { ~tileWidth : Tile }* 
			| 1 : Wall }
	
GroundFloor -->
	split(x){ 1 			: Wall 
			| { ~tileWidth : Tile }* 
			| ~tileWidth 	: EntranceTile 
			| 1 			: Wall }
		
Tile -->
	split(x){ ~1 : Wall 
			|  windowWidth : split(y){ ~1: Wall | 1.5: Window | ~1: Wall }
			| ~1 : Wall }		 
	
EntranceTile -->
	split(x){ ~1 : SolidWall 
			| 2  : split(y){ 2.5: Door | ~2: SolidWall } 
			| ~1 : SolidWall }
	
Window -->
	s('1,'1,0.4)
	t(0,0,-0.25)
	i(basicWindow)  
	
Door -->
	s('1,'1,0.1)
	t(0,0,-0.5)
	primitiveCube()	  

Wall -->
	color(wallColor)

SolidWall -->
	color(wallColor)
	s('1,'1,0.4) 
	t(0,0,-0.4) 
	primitiveCube()	