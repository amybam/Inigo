/**
 * File:    NeoGrec_BETA.cga
 * Created: 15 Jul 2020 12:47:10 GMT
 * Author:  Kevin Huberty
 */

version "2020.0"

@Hidden
attr type= ""
@Hidden
attr floorIndex = 0
@Hidden
attr floorCount = 0
@Hidden
attr eachHeight = 0
@Hidden
attr floorType = ""

# --Inherited------------------------------

@Hidden
attr tileWidth = 3.1
@Hidden
attr windowWidth = 1.4
@Hidden
attr doorWidth = 2.1
@Hidden
attr foundationHeight = 0
@Hidden
attr groundfloorHeight = 3
@Hidden
attr floorHeight = 2.8
@Hidden
attr topfloorHeight = 2.8

import Interiors: "rules/expansions/Interiors_BETA.cga"

const neogreccolumn = "facades/neogrec/column.obj"
const neogrecwindow1 = "facades/neogrec/window1.obj"
const neogrecwindow2 = "facades/neogrec/window2.obj"
const neogrecwindow3 = "facades/neogrec/window3.obj"
const neogrecledge1 = "facades/neogrec/ledge1.obj"
const neogrecledge2 = "facades/neogrec/ledge2.obj"
const neogrecdoor = "facades/neogrec/door.obj"


const wallColor = "#ffffff"




SplitHandling(__type, __foundationHeight, __groundfloorHeight, __floorHeight, __topfloorHeight, __tileWidth, __windowWidth, __doorWidth) -->
	alignScopeToAxes(y)
	
	# --Set Local Variables---------------
	set(type, __type)

	set(foundationHeight, __foundationHeight)
	set(groundfloorHeight, __groundfloorHeight)
	set(floorHeight, __floorHeight)
	set(topfloorHeight, __topfloorHeight)
	
	set(tileWidth, __tileWidth)
	set(windowWidth, __windowWidth)
	set(doorWidth, __doorWidth)
	
	[case type == "Floors": FacadeSplit else: comp(f) {side: FacadeSplit}]
	
	 
FacadeSplit -->
	
		split(y){foundationHeight    : 
                set(floorType, "Foundation")
                set(eachHeight, foundationHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL
            |groundfloorHeight   : 
                set(floorType, "Ground")
                set(eachHeight, groundfloorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL
            |{~floorHeight       : 
                set(floorType, "Middle")
                set(eachHeight, floorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL}*
            |topfloorHeight      : 
                set(floorType, "Top")
                set(eachHeight, topfloorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL}
Facade -->
	[case floorIndex==1 || floorType == "Top": QFloor(floorIndex)
	 else:	Floor(floorIndex)]
FloorMass -->
    set(floorIndex, split.index)
    set(floorCount, split.total)

	comp(f) {top: Interiors.Start("Ceiling") | bottom: Interiors.Start("Floor") | all: NIL}
Floor(a) -->
	case scope.sx < 3 : Column
	else : 
	split(x){ 0.75: Column 
			| {~tileWidth: Window(a,split.index) 
			  | 0.75: Column}* }

QFloor(a) -->
	split(y){~floorHeight: Floor(floorIndex)
			|1: QLedge}
	
Window(a,door)-->
				case a==0 && door%4==0: i(neogrecdoor)t(0,0,-0.16)
				case a==0: i(neogrecwindow1)t(0,0,-0.14)
			    case a==1: i(neogrecwindow2)t(0,0,-0.11) 
			    case a>=2: i(neogrecwindow3)t(0,0,-0.14) 
				else:NIL
				
Column-->set(trim.vertical, false)
	i(neogreccolumn) t(0,0,-0.25) s('1,'1,0.4)
		

QLedge--> 
	s('1.5,'1,'1) 
	center(x) 
	[case floorType == "Top": split(x){~tileWidth: iQB(1)}*
	else: split(x){~tileWidth: iQB(0)}*]
	
				
						
iQB(a)--> 
	case a==0:i(neogrecledge1)
	else:i(neogrecledge2) 
