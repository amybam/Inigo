/**
 * File:    Federal_BETA.cga
 * Created: 14 Jul 2020 15:24:36 GMT
 * Author:  Kevin Huberty
 */

version "2020.0"

@Hidden
attr type= ""
@Hidden
attr floorIndex = 0
@Hidden
attr floorCount = 0
@Hidden
attr eachHeight = 0
@Hidden
attr floorType = ""

# --Inherited------------------------------

@Hidden
attr tileWidth = 3.1
@Hidden
attr windowWidth = 1.4
@Hidden
attr doorWidth = 2.1
@Hidden
attr foundationHeight = 0
@Hidden
attr groundfloorHeight = 3
@Hidden
attr floorHeight = 2.8
@Hidden
attr topfloorHeight = 2.8

import Interiors: "rules/expansions/Interiors_BETA.cga"

const federalwindowAsset = "facades/federal/elem_window_frame.obj"
const federalhalfwindowAsset = "facades/federal/elem_halfwindow_frame.obj"
const italianatehalfarchAsset = "facades/palazzo/elem_facade_halfarch.obj"
const italianatemodillionAsset = "facades/palazzo/elem_facade_modillion.obj"

const wallInset = 0.4


SplitHandling(__type, __foundationHeight, __groundfloorHeight, __floorHeight, __topfloorHeight, __tileWidth, __windowWidth, __doorWidth) -->
	alignScopeToAxes(y)
	
	# --Set Local Variables---------------
	set(type, __type)

	set(foundationHeight, __foundationHeight)
	set(groundfloorHeight, __groundfloorHeight)
	set(floorHeight, __floorHeight)
	set(topfloorHeight, __topfloorHeight)
	
	set(tileWidth, __tileWidth)
	set(windowWidth, __windowWidth)
	set(doorWidth, __doorWidth)
	
	[case type == "Floors": FacadeSplit else: comp(f) {side: FacadeSplit}]
	
FacadeSplit -->
	
		split(y){foundationHeight    : 
                set(floorType, "Foundation")
                set(eachHeight, foundationHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL
            |groundfloorHeight   : 
                set(floorType, "Ground")
                set(eachHeight, groundfloorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL
            |{~floorHeight       : 
                set(floorType, "Middle")
                set(eachHeight, floorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL}*
            |topfloorHeight      : 
                set(floorType, "Top")
                set(eachHeight, topfloorHeight)
                [case type == "Shell": Facade else: FloorMass]
                NIL}

FloorMass -->
    set(floorIndex, split.index)
    set(floorCount, split.total)

	comp(f) {top: Interiors.Start("Ceiling") | bottom: Interiors.Start("Floor") | all: NIL}


Facade -->
	[case floorType == "Foundation": 
		FederalBasement
	 case floorType == "Ground":
		FederalEntry
	else:
		FederalFloor]
	
FederalFloor -->
	split(x){ 0.25 			: FederalWall 
			| { ~tileWidth  : FederalWindowTile }* 
			| 0.25 			: FederalWall }
	
	
FederalBasement -->
	split(y){~1: FoundationFloorFederal
			|0.25: BasementLedge}
			
FoundationFloorFederal -->
	comp(f){side: FoundationTiles}
	
FoundationTiles -->
		split(x){ 0.25 			: FederalWall 
			| { ~tileWidth  : FederalHalfWindowTile }* 
			| 0.25 			: FederalWall }
			
FederalHalfWindowTile -->
		split(x){ ~0.5 : FederalWall 
			|  0.8 : split(y){ ~0.25: FederalWall | .5: HalfWindowAsset | 0.25: FederalWall }
			| ~0.5 : FederalWall }
			
FederalEntry -->
	split(x){ 0.25 			: FederalWall 
			| ~tileWidth 	: FederalEntranceTile
			| { ~tileWidth  : FederalWindowTile }* 
			| 0.25 			: FederalWall }
	
FederalWindowTile -->
	split(x){ ~0.5 : FederalWall 
			|  0.8 : split(y){ ~0.25: FederalWall | 1.8: WindowAsset | ~0.25: FederalWall }
			| ~0.5 : FederalWall }

FederalEntranceTile -->
	split(x){ .75: FederalWall
			| ~1: FederalDoorTile
			| .75: FederalWall}

FederalDoorTile -->
	split(y){~1          : Door 
            | scope.sx/2 : Arcs 
            | 0.5        : Arctop}
            
Arctop -->
	FederalWall
	s(0.25,'.5,0.15) center(x) i(italianatemodillionAsset) FederalDoor
	
Arcs -->  
	s('1,'1,wallInset) t(0,0,-wallInset)
	FederalWall 
	primitiveCube()
	split(x){ ~1 : ArcAsset 
			| ~1 : r(scopeCenter,0,0,-90) ArcAsset}
ArcAsset --> [i(italianatehalfarchAsset) FederalDoor]

FederalWall -->
	extrude(-0.1)

Door -->
	t(0,0,-wallInset) FederalDoor
            
            
WindowAsset -->
	s('1,'1,'0.2) t(0,0,-0.275)
	t(0,0,0.165)
	[ i(federalwindowAsset) FederalWindow]
	
HalfWindowAsset -->
	s('1,'1,'0.2) t(0,0,-0.275)
	t(0,0,0.165)
	[ i(federalhalfwindowAsset) FederalWindow ]
	
Glass -->
	set(material.opacity,0.5 )
	
	
BasementLedge -->
	extrude(0.05)
			    